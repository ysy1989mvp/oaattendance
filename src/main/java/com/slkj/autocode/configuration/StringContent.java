package com.slkj.autocode.configuration;


import com.qkz5.oaattendance.Application;
import org.springframework.boot.builder.SpringApplicationBuilder;

public class StringContent {
	public static final String BUID_GRADLE = "/*  \n"+
			"  * This build file was auto generated by running the Gradle 'init' task  \n"+
		 " * by '18214596741' at '17-12-20 小码哥2:57' with Gradle 2.4  \n"+
		 " *  \n"+
		 " * This generated file contains a sample Java project to get you started.  \n"+
		 " * For more details take a look at the Java Quickstart chapter in the Gradle  \n"+
		 "  * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html\n"+  
			 " */  \n"+
		 "  \n"+
		 " // Apply the java plugin to add support for Java  \n"+
		 " apply plugin: 'java'  \n"+
		" \n"+
		" // In this section you declare where to find the dependencies of your project  \n"+
		" repositories {  \n"+
			"    // Use 'jcenter' for resolving your dependencies.  \n"+
			"    // You can declare any Maven/Ivy/file repository here.  \n"+
			"     jcenter()  \n"+
		    " }  \n"+
		" \n"+
		"dependencies {\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf\n"+
"   compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '1.5.4.RELEASE'\n"+
" \n"+
"	// https://mvnrepository.com/artifact/net.sf.json-lib/json-lib\n"+
"	compile 'net.sf.json-lib:json-lib:2.4:jdk15'  \n"+
" \n"+
"	// https://mvnrepository.com/artifact/com.google.code.gson/gson\n"+
"	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'\n"+
"\n"+
"  // https://mvnrepository.com/artifact/net.sf.ezmorph/ezmorph\n"+
"   compile group: 'net.sf.ezmorph', name: 'ezmorph', version: '1.0.6'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.jsoup/jsoup\n"+
"   compile group: 'org.jsoup', name: 'jsoup', version: '1.6.1'\n"+
"\n"+
"   // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils\n"+
"   compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.0'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/commons-collections/commons-collections\n"+
"   compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/commons-lang/commons-lang\n"+
"   compile group: 'commons-lang', name: 'commons-lang', version: '2.4'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.yaml/snakeyaml\n"+
"   compile group: 'org.yaml', name: 'snakeyaml', version: '1.5'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.session/spring-session\n"+
"   // compile group: 'org.springframework.session', name: 'spring-session', version: '1.0.2.RELEASE'\n"+
"\n"+
"     // https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis\n"+
"   compile group: 'org.springframework.session', name: 'spring-session-data-redis', version: '1.3.1.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-redis\n"+
"    compile group: 'org.springframework.boot', name: 'spring-boot-starter-redis', version: '1.3.1.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/aspectj/aspectjrt\n"+
"    compile group: 'aspectj', name: 'aspectjrt', version: '1.5.3'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework/spring-beans\n"+
"    compile group: 'org.springframework', name: 'spring-beans', version: '4.3.9.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.apache.commons/commons-pool2\n"+
"    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/commons-logging/commons-logging\n"+
"   compile group: 'commons-logging', name: 'commons-logging', version: '1.2'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2\n"+
"   compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api\n"+
"    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/dom4j/dom4j\n"+
"    compile group: 'dom4j', name: 'dom4j', version: '1.6.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring\n"+
"    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.3.2'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.apache.shiro/shiro-ehcache\n"+
"    compile group: 'org.apache.shiro', name: 'shiro-ehcache', version: '1.3.2'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2\n"+
"    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui\n"+
"    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/com.mangofactory/swagger-springmvc\n"+
"    compile group: 'com.mangofactory', name: 'swagger-springmvc', version: '1.0.2'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl\n"+
"    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl\n"+
"    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'\n"+
"\n"+
"   // https://mvnrepository.com/artifact/com.alibaba/fastjson\n"+
"    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.8'\n"+
"\n"+
"   // https://mvnrepository.com/artifact/mysql/mysql-connector-java\n"+
"    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-undertow\n"+
"    compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow', version: '1.3.2.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc\n"+
"    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '1.3.2.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web\n"+
"    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.3.2.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot\n"+
"    compile group: 'org.springframework.boot', name: 'spring-boot', version: '1.3.2.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter\n"+
"    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.3.2.RELEASE'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api\n"+
"    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/com.miglayout/miglayout\n"+
"    compile group: 'com.miglayout', name: 'miglayout', version: '3.7.3.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind\n"+
"    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.5'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/com.alibaba/druid\n"+
"    compile group: 'com.alibaba', name: 'druid', version: '1.0.18'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.mybatis/mybatis-spring\n"+
"    compile group: 'org.mybatis', name: 'mybatis-spring', version: '1.2.4'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/org.mybatis/mybatis\n"+
"    compile group: 'org.mybatis', name: 'mybatis', version: '3.3.1'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations\n"+
"    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.0'\n"+
"\n"+
"    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core\n"+
"    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.6.5'\n"+
"\n"+
"     // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl\n"+
"    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.1.0'\n"+
"\n"+
"     // The production code uses the SLF4J logging API at compile time\n"+
"     compile 'org.slf4j:slf4j-api:1.7.12'\n"+
"     // https://mvnrepository.com/artifact/org.springframework/spring-context\n"+
"    compile group: 'org.springframework', name: 'spring-context', version: '4.3.9.RELEASE'\n"+
"\n"+
"     // Declare the dependency for your favourite test framework you want to use in your tests.\n"+
"     // TestNG is also supported by the Gradle Test task. Just change the\n"+
"     // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add\n"+
"     // 'test.useTestNG()' to your build script.\n"+
"    testCompile 'junit:junit:4.12'\n"+
"	}  ";
	
	//springboot的配置文件application.yml的内容
	public static final String APPLICATION_YML = "#testmsg\n"+
			"test:\n"+
			"    msg: yyysssyyy\n"+
			"# Server\n"+
			"server:\n"+
			"    port: 8080\n"+
			"    tomcat:\n"+
			"        uri-encoding: UTF-8\n"+
			"        \n"+
			"# Mybatis  \n"+
			"\n"+
			"mybatis:\n"+
			"    typeAliasesPackage: com.slkj.gradletest.entity\n"+
			"    mapperLocations: classpath:mapper/*.xml\n"+
			"    configLocation: classpath:mybatis_config.xml\n"+
			"  \n"+
			"#log  \n"+
			"logging:\n"+
			"    level:\n"+
			"        org:\n"+
			"            springframework:\n"+
			"                web: INFO\n"+
			"        com:\n"+
			"            ibatis: DEBUG\n"+ 
			"#api gateway (develop)  \n"+
			"#-------------------------- \n"+ 
			"############api.gateway.server=http://10.36.134.62:9002\n"+
			"#--------------------------  \n"+
			"  \n"+
			"#api gateway (test)  \n"+
			"#api.gateway.server=http://10.37.149.160:9102  \n"+
			"  \n"+
			"  \n"+
			"# mysql (test) \n"+
			"spring:\n"+
			"    datasource:\n"+
			"        driverClassName: com.mysql.jdbc.Driver\n"+
			"        #url:jdbc:mysql://localhost:3306/collective?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useOldAliasMetadataBehavior=true\n"+
			"        url: jdbc:mysql://localhost:3306/collective?characterEncoding=utf8\n"+
			"        username: root\n"+
			"        password: 123456\n"+
			"        initialSize: 1\n"+
			"        minIdle: 1\n"+
			"        maxActive: 200\n"+
			"  \n"+
			"    http:\n"+
			"        encoding:\n"+
			"            force: true\n"+
			"            charset: UTF-8\n"+
			"            enabled: true\n"+
			"\n"+
			"\n"+
			"    mybatis:\n"+
			"        mapperPackage: /mapper/*.xml\n"+
			"        dialect: MYSQL\n"+
			"#-----------------------------------  \n"+
			"  # REDIS (RedisProperties)\n"+
			"\n"+
			"    redis:\n"+
			"        # Redis数据库索引（默认为0）\n"+
			"        database: 0\n"+
			"        # Redis服务器地址\n"+
			"        host: 192.168.4.104\n"+
			"        # Redis服务器连接端口\n"+
			"        port: 6379\n"+
			"        # Redis服务器连接密码（默认为空）\n"+
			"        password:\n"+
			"        pool:\n"+
			"            # 连接池最大连接数（使用负值表示没有限制）\n"+
			"            max-active: 8\n"+
			"            # 连接池最大阻塞等待时间（使用负值表示没有限制）\n"+
			"            max-wait: -1\n"+
			"            # 连接池中的最大空闲连接\n"+
			"            max-idle: 8\n"+
			"            # 连接池中的最小空闲连接\n"+
			"            min-idle: 0\n"+
			"        # 连接超时时间（毫秒）\n"+
			"        timeout: 5000\n"+
			"\n"+
			"redis:\n"+
			"    # 数据的默认保存有效时间\n"+
			"    validDay: 1\n"+
			"\n"+
			"\n"+
			"# redis  (test)  \n"+
			"#spring.redis.sentinel.master=mymaster  \n"+
			"#spring.redis.sentinel.nodes=10.37.149.169:26379,10.37.149.170:26379,10.37.149.172:26379  ";

	//数据库表的配置文件
	public static final String MYSQL_XML = "<tables>\n"+
			"\t<table id=\"table_name\" class=\"className\"></table>\n"+
		"</tables>";
	
	//mybatis连接数据库的相关配置文件
	public static final String MYBATISCONFIG_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+
					"<!DOCTYPE configuration\n"+
					"        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n"+
					"       \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n"+
					"        \n"+
					"<configuration>\n"+
					"    <properties>\n"+
					"        <property name=\"dialect\" value=\"mysql\" />\n"+
					"    </properties>\n"+
					"    <settings>\n"+
					"        <!-- 开启驼峰匹配 -->\n"+
					"        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n"+
					"        <!-- 这个配置使全局的映射器启用或禁用缓存。系统默认值是true，设置只是为了展示出来 -->\n"+
					"        <setting name=\"cacheEnabled\" value=\"true\" />\n"+
					"        <!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 系统默认值是true，设置只是为了展示出来 -->\n"+
					"        <setting name=\"lazyLoadingEnabled\" value=\"true\" />\n"+
					"        <!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。 系统默认值是true，设置只是为了展示出来 -->\n"+
					"        <setting name=\"multipleResultSetsEnabled\" value=\"true\" />\n"+
					"        <!--使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动。 系统默认值是true，设置只是为了展示出来 -->\n"+
					"        <setting name=\"useColumnLabel\" value=\"true\" />\n"+
					"        <!--允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如 \n"+
					"            Derby）。 系统默认值是false，设置只是为了展示出来 -->\n"+
					"        <setting name=\"useGeneratedKeys\" value=\"false\" />\n"+
					"        <!--配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 系统默认值是SIMPLE，设置只是为了展示出来 -->\n"+
					"        <setting name=\"defaultExecutorType\" value=\"SIMPLE\" />\n"+
					"        <!--设置超时时间，它决定驱动等待一个数据库响应的时间。 系统默认值是null，设置只是为了展示出来 -->\n"+
					"        <setting name=\"defaultStatementTimeout\" value=\"25000\" />\n"+
					"    </settings>\n"+
					"</configuration>  ";
	
	//实体类entity pojo
	public static final String ENTITYPOJO_JAVA1="package com.slkj.gradletest.entity.pojo;\n"+
			"			\n"+
			"import java.io.Serializable;\n"+
			"import java.util.Date;\n"+
			"/**\n"+
			" * \n"+
			" * @author sunny Yang\n"+
			" * @date 2017年12月20日\n"+
			" * @discribe MerchantUser实体类，数据类型与字段 和数据库一致，\n"+
			" * 不允许更改，需要更改的部分在mojo对应的AO类中进行更改\n"+
			" *\n"+
			" *\n"+
			" */\n"+
			"public class MerchantUser implements Serializable{\n"+
			"	/**\n"+
			"	 * 控制版本号\n"+
			"	 */\n"+
			"	private static final long serialVersionUID = 1L;\n";
	
	//mybatis配置文件
	public static final String MYBATISCONFIGURATION_JAVA = "package com.slkj.gradletest.config;\n"+
					"			\n"+
					"import java.io.IOException;\n"+
					"\n"+
					"import javax.sql.DataSource;\n"+
					"\n"+
					"import org.apache.commons.logging.Log;\n"+
					"import org.apache.commons.logging.LogFactory;\n"+
					"import org.apache.ibatis.session.SqlSessionFactory;\n"+
					"import org.mybatis.spring.SqlSessionFactoryBean;\n"+
					"import org.springframework.beans.factory.annotation.Autowired;\n"+
					"import org.springframework.beans.factory.annotation.Value;\n"+
					"import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\n"+
					"import org.springframework.boot.context.properties.ConfigurationProperties;\n"+
					"import org.springframework.context.annotation.Bean;\n"+
					"import org.springframework.context.annotation.Configuration;\n"+
					"import org.springframework.context.annotation.Primary;\n"+
					"import org.springframework.core.io.DefaultResourceLoader;\n"+
					"import org.springframework.core.io.Resource;\n"+
					"import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n"+
					"import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n"+
					"import org.springframework.transaction.PlatformTransactionManager;\n"+
					"import org.springframework.transaction.annotation.EnableTransactionManagement;\n"+
					"import org.springframework.transaction.annotation.TransactionManagementConfigurer;\n"+
					"import com.alibaba.druid.pool.DruidDataSource;\n"+
					"\n"+
					"@Configuration\n"+
					"@EnableTransactionManagement\n"+
					"public class MybatisConfiguration implements TransactionManagementConfigurer{\n"+
					"	\n"+
					"    private static Log logger = LogFactory.getLog(MybatisConfiguration.class);\n"+
					"    \n"+
					"//  配置类型别名\n"+
					"    @Value(\"${mybatis.typeAliasesPackage}\")\n"+
					"    private String typeAliasesPackage;\n"+
					"    \n"+
					"//  配置mapper的扫描，找到所有的mapper.xml映射文件\n"+
					"    @Value(\"${mybatis.mapperLocations}\")\n"+
					"    private String mapperLocations;\n"+
					"    \n"+
					"//  加载全局的配置文件\n"+
					"    @Value(\"${mybatis.configLocation}\")\n"+
					"    private String configLocation;\n"+
					"    \n"+
					"    @Autowired\n"+
					"    private DataSource dataSource;\n"+
					"    // DataSource配置\n"+
					"	@Bean\n"+
					"	@Primary\n"+
					"    @ConfigurationProperties(prefix = \"spring.datasource\")\n"+
					"    public DataSource primaryDataSource() {\n"+
					"        return DataSourceBuilder.create().build();\n"+
					"    }\n"+
					"    \n"+
					"    // 提供SqlSeesion\n"+
					"    @Bean(name = \"sqlSessionFactory\")\n"+
					"    public SqlSessionFactory sqlSessionFactoryBean() throws IOException {\n"+
					"            SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();\n"+
					"            sessionFactoryBean.setDataSource(dataSource);\n"+
					"            // 读取配置 \n"+
					"            sessionFactoryBean.setTypeAliasesPackage(typeAliasesPackage);\n"+
					"            // mapperLocations\n"+
					"            Resource[] resources = new PathMatchingResourcePatternResolver()\n"+
					"                    .getResources(mapperLocations);\n"+
					"            sessionFactoryBean.setMapperLocations(resources);\n"+
					"//      //\n"+
					"            sessionFactoryBean.setConfigLocation(\n"+
					"                    new DefaultResourceLoader().getResource(configLocation));\n"+
					"            //添加插件  （改为使用配置文件加载了）\n"+
					"//          sqlSessionFactoryBean.setPlugins(new Interceptor[]{pageHelper()});\n"+
					"                    \n"+
					"            try {\n"+
					"				return sessionFactoryBean.getObject();\n"+
					"			} catch (Exception e) {\n"+
					"				// TODO Auto-generated catch block\n"+
					"				e.printStackTrace();\n"+
					"			}\n"+
					"			return null;\n"+
					 "   }\n"+
					  "  \n"+
					"    \n"+
					"//  @Bean\n"+
					"//    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n"+
					"//        return new SqlSessionTemplate(sqlSessionFactory);\n"+
					"//    }\n"+
					"    \n"+
					"//  @Bean\n"+
					"//  public PlatformTransactionManager transactionManager(){\n"+
					"//      return new DataSourceTransactionManager(dataSource);\n"+
					"//  }\n"+
					"    \n"+
					"    \n"+
					"    @Bean\n"+
					"    public PlatformTransactionManager annotationDrivenTransactionManager() {\n"+
					"        return new DataSourceTransactionManager(dataSource);\n"+
					"    }\n"+
					"    \n"+
					"    \n"+
					"}";
	
	//mybatis自动扫描配置文件
	public static final String MYBATISMAPPERSCANNERCONFIG_JAVA = "package com.slkj.gradletest.config;\n"+
						"\n"+
						"import org.mybatis.spring.mapper.MapperScannerConfigurer;\n"+
						"import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n"+
						"import org.springframework.context.annotation.Bean;\n"+
						"import org.springframework.context.annotation.Configuration;\n"+
						"\n"+
						"@Configuration\n"+
						"//注意，由于MapperScannerConfigurer执行的比较早，所以必须有下面的注解\n"+
						"@AutoConfigureAfter({MyBatisMapperScannerConfig.class})\n"+
						"public class MyBatisMapperScannerConfig {\n"+
						"\n"+
						"    @Bean\n"+
						"    public MapperScannerConfigurer mapperScannerConfigurer(){\n"+
						"        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n"+
						"\n"+
						"        mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n"+
						"        mapperScannerConfigurer.setBasePackage(\"com.slkj.gradletest.dao\");\n"+
						"\n"+
						"\n"+
						"        return mapperScannerConfigurer;\n"+
						"    }\n"+
						"\n"+
						"}";
	
	//redis配置文件
	public static final String REDISCONFIG_JAVA = "package com.slkj.gradletest.config;\n"+
						"			\n"+
						"import java.lang.reflect.Method;\n"+
						"\n"+
						"import org.springframework.beans.factory.annotation.Value;\n"+
						"import org.springframework.cache.CacheManager;\n"+
						"import org.springframework.cache.annotation.CachingConfigurerSupport;\n"+
						"import org.springframework.cache.annotation.EnableCaching;\n"+
						"import org.springframework.cache.interceptor.KeyGenerator;\n"+
						"import org.springframework.context.annotation.Bean;\n"+
						"import org.springframework.context.annotation.Configuration;\n"+
						"import org.springframework.data.redis.cache.RedisCacheManager;\n"+
						"import org.springframework.data.redis.connection.RedisConnectionFactory;\n"+
						"import org.springframework.data.redis.core.RedisTemplate;\n"+
						"import org.springframework.data.redis.core.StringRedisTemplate;\n"+
						"import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n"+
						"\n"+
						"import com.fasterxml.jackson.annotation.JsonAutoDetect;\n"+
						"import com.fasterxml.jackson.annotation.PropertyAccessor;\n"+
						"import com.fasterxml.jackson.databind.ObjectMapper;\n"+
						"\n"+
						"\n"+
						"@Configuration\n"+
						"@EnableCaching\n"+
						"public class RedisConfig extends CachingConfigurerSupport{\n"+
						"	@Value(\"${redis.validDay}\")\n"+
						"	private String validDay;\n"+
						"    @Bean\n"+
						"    public KeyGenerator keyGenerator() {\n"+
						"        return new KeyGenerator() {\n"+
						"            @Override\n"+
						"            public Object generate(Object target, Method method, Object... params) {\n"+
						"                StringBuilder sb = new StringBuilder();\n"+
						"                sb.append(target.getClass().getName());\n"+
						"                sb.append(method.getName());\n"+
						"                for (Object obj : params) {\n"+
						"                    sb.append(obj.toString());\n"+
						"                }\n"+
						"                return sb.toString();\n"+
						"            }\n"+
						"        };\n"+
						"    }\n"+
						"    \n"+
						"    @SuppressWarnings(\"rawtypes\")\n"+
						"    @Bean\n"+
						"    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n"+
						"        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);\n"+
						"        //设置缓存过期时间\n"+
						"        rcm.setDefaultExpiration(60*60*24*Integer.parseInt(validDay));//秒\n"+
						"        return rcm;\n"+
						"    }\n"+
						"    \n"+
						"    @Bean\n"+
						"    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n"+
						"        StringRedisTemplate template = new StringRedisTemplate(factory);\n"+
						"        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n"+
						"        ObjectMapper om = new ObjectMapper();\n"+
						"        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n"+
						"        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n"+
						"        jackson2JsonRedisSerializer.setObjectMapper(om);\n"+
						"        template.setValueSerializer(jackson2JsonRedisSerializer);\n"+
						"        template.afterPropertiesSet();\n"+
						"        return template;\n"+
						"    }\n"+
						"    \n"+
						"}";
	
	//session和redis共享配置文件
	public static final String SESSIONCONFIG_JAVA = "package com.slkj.gradletest.config;\n"+
					"			\n"+
					"import org.springframework.context.annotation.Configuration;\n"+
					"import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n"+
					"\n"+
					"@Configuration\n"+
					"@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 86400*30)\n"+
					"public class SessionConfig {\n"+
					"	\n"+
					"}";
	//shiro配置文件
	
	//
	public static final String SHIROCONFIGURATION_JAVA = "package com.slkj.gradletest.config;\n"+
					"			\n"+
					"import java.util.LinkedHashMap;\n"+
					"import java.util.Map;\n"+
					"\n"+
					"import org.apache.shiro.cache.ehcache.EhCacheManager;\n"+
					"import org.apache.shiro.spring.LifecycleBeanPostProcessor;\n"+
					"import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\n"+
					"import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n"+
					"import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n"+
					"import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\n"+
					"import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n"+
					"import org.springframework.context.annotation.Bean;\n"+
					"import org.springframework.context.annotation.Configuration;\n"+
					"import org.springframework.context.annotation.DependsOn;\n"+
					"\n"+
					"@Configuration\n"+
					"public class ShiroConfiguration {\n"+
					"	\n"+
					"    @Bean(name = \"lifecycleBeanPostProcessor\")\n"+
					"    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n"+
					"        return new LifecycleBeanPostProcessor();\n"+
					"    }\n"+
					"    \n"+
					"    //处理认证匹配处理器：如果自定义需要实现继承HashedCredentialsMatcher\n"+
					"    //指定加密方式方式，也可以在这里加入缓存，当用户超过五次登陆错误就锁定该用户禁止不断尝试登陆\n"+
					"//    @Bean(name = \"hashedCredentialsMatcher\")\n"+
					"//    public HashedCredentialsMatcher hashedCredentialsMatcher() {\n"+
					"//        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n"+
					"//        credentialsMatcher.setHashAlgorithmName(\"MD5\");\n"+
					"//        credentialsMatcher.setHashIterations(2);\n"+
					"//        credentialsMatcher.setStoredCredentialsHexEncoded(true);\n"+
					"//        return credentialsMatcher;\n"+
					"//    }\n"+
					"    \n"+
					"    @Bean(name = \"shiroRealm\")\n"+
					"    @DependsOn(\"lifecycleBeanPostProcessor\")\n"+
					"    public ShiroRealm shiroRealm() {\n"+
					"        ShiroRealm realm = new ShiroRealm();\n"+
					"//        realm.setCredentialsMatcher(hashedCredentialsMatcher());\n"+
					"        return realm;\n"+
					"    }\n"+
					"    \n"+
					"    @Bean(name = \"ehCacheManager\")\n"+
					"    @DependsOn(\"lifecycleBeanPostProcessor\")\n"+
					"    public EhCacheManager ehCacheManager(){\n"+
					"        EhCacheManager ehCacheManager = new EhCacheManager();\n"+
					"        return ehCacheManager;\n"+
					"    }\n"+
					"    \n"+
					"    @Bean(name = \"securityManager\")\n"+
					"    public DefaultWebSecurityManager securityManager(){\n"+
					"        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n"+
					"        securityManager.setRealm(shiroRealm());\n"+
					"        securityManager.setCacheManager(ehCacheManager());//用户授权/认证信息Cache, 采用EhCache 缓存\n"+
					"        return securityManager;\n"+
					"    }\n"+
					"    \n"+
					"    @Bean(name = \"shiroFilter\")\n"+
					"    public ShiroFilterFactoryBean shiroFilterFactoryBean(DefaultWebSecurityManager  securityManager){\n"+
					"        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n"+
					"        shiroFilterFactoryBean.setSecurityManager(securityManager);\n"+
					"        \n"+
					"//        Map<String, Filter> filters = new LinkedHashMap<String, Filter>();\n"+
					"//        LogoutFilter logoutFilter = new LogoutFilter();\n"+
					"//        logoutFilter.setRedirectUrl(\"/login\");\n"+
					"//        filters.put(\"logout\", logoutFilter);\n"+
					"//        shiroFilterFactoryBean.setFilters(filters);\n"+
					"        System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n"+
					"        Map<String, String> filterChainDefinitionManager = new LinkedHashMap<>();\n"+
					"//        filterChainDefinitionManager.put(\"/logout\", \"logout\");\n"+
					"//        filterChainDefinitionManager.put(\"/user/**\", \"authc,roles[user]\");\n"+
					"//        filterChainDefinitionManager.put(\"/shop/**\", \"authc,roles[shop]\");\n"+
					"//        filterChainDefinitionManager.put(\"/admin/**\", \"authc,roles[admin]\");\n"+
					"//        filterChainDefinitionManager.put(\"/login\", \"anon\");//anon 可以理解为不拦截\n"+
					"//        filterChainDefinitionManager.put(\"/ajaxLogin\", \"anon\");//anon 可以理解为不拦截\n"+
					"        filterChainDefinitionManager.put(\"/statistic/**\",  \"anon\");//静态资源不拦截\n"+
					"//        filterChainDefinitionManager.put(\"/**\",  \"authc,roles[user]\");//其他资源全部拦截\n"+
					"        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionManager);\n"+
					"        \n"+
					"        shiroFilterFactoryBean.setLoginUrl(\"/login\");\n"+
					"        shiroFilterFactoryBean.setSuccessUrl(\"/\");\n"+
					"        shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\n"+
					"        \n"+
					"        return shiroFilterFactoryBean;\n"+
					"    }\n"+
					"    \n"+
					"    @Bean\n"+
					"    @ConditionalOnMissingBean\n"+
					"    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {\n"+
					"        DefaultAdvisorAutoProxyCreator daap = new DefaultAdvisorAutoProxyCreator();\n"+
					"        daap.setProxyTargetClass(true);\n"+
					"        return daap;\n"+
					"    }\n"+
					"    \n"+
					"    @Bean\n"+
					"    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) {\n"+
					"        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();\n"+
					"        aasa.setSecurityManager(securityManager);\n"+
					"        return aasa;\n"+
					"    }\n"+
					"    \n"+
					"    //thymeleaf模板引擎和shiro整合时使用\n"+
					"    /*@Bean(name = \"shiroDialect\")\n"+
					"    public ShiroDialect shiroDialect(){\n"+
					"        return new ShiroDialect();\n"+
					"    }*/\n"+
					"    \n"+
					"}";

	//
	public static final String SHIROREALM_JAVA = "package com.slkj.gradletest.config;\n"+
							"			\n"+
							"import java.util.ArrayList;\n"+
							"import java.util.List;\n"+
							"import org.apache.shiro.authc.AuthenticationException;\n"+
							"import org.apache.shiro.authc.AuthenticationInfo;\n"+
							"import org.apache.shiro.authc.AuthenticationToken;\n"+
							"import org.apache.shiro.authc.SimpleAuthenticationInfo;\n"+
							"import org.apache.shiro.authc.UsernamePasswordToken;\n"+
							"import org.apache.shiro.authz.AuthorizationInfo;\n"+
							"import org.apache.shiro.authz.SimpleAuthorizationInfo;\n"+
							"import org.apache.shiro.realm.AuthorizingRealm;\n"+
							"import org.apache.shiro.subject.PrincipalCollection;\n"+
							"import org.slf4j.Logger;\n"+
							"import org.slf4j.LoggerFactory;\n"+
							"import org.springframework.beans.factory.annotation.Autowired;\n"+
							"\n"+
							"public class ShiroRealm extends AuthorizingRealm {\n"+
							"	\n"+
							"    private Logger logger = LoggerFactory.getLogger(ShiroRealm.class);\n"+
							"    \n"+
							"    //一般这里都写的是servic，我省略了service的接口和实现方法直接调用的dao\n"+
							"//    @Autowired\n"+
							"//    private MerchantUserDAO merchantUserDAO;\n"+
							"    \n"+
							"    /**\n"+
							"     * 登录认证\n"+
							"     *\n"+
							"     * @param authenticationToken\n"+
							"     * @return\n"+
							"     * @throws AuthenticationException\n"+
							"     */\n"+
							"    @Override\n"+
							"    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n"+
							"        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n"+
							"        logger.info(\"验证当前Subject时获取到token为：\" + token.toString());\n"+
							"//        MerchantUserCriteria userCriteria = new MerchantUserCriteria();\n"+
							"//        userCriteria.merchantUserNameEquals(token.getUsername());\n"+
							"//        //查出是否有此用户\n"+
							"//        List<MerchantUser> merchantUsers = merchantUserDAO.selectByCriteria(userCriteria);\n"+
							"//        logger.info(\"查询到的用户：\"+merchantUsers.toString());\n"+
							"//        if(merchantUsers.size()==1){\n"+
							"//        	MerchantUser hasUser = merchantUsers.get(0);\n"+
							"//         // 若存在，将此用户存放到登录认证info中，无需自己做密码对比，Shiro会为我们进行密码对比校验\n"+
							"//            return new SimpleAuthenticationInfo(hasUser, hasUser.getMerchantPassword(), getName());\n"+
							"//        }\n"+
							"        return null;\n"+
							"    }\n"+
							"    \n"+
							"	@Override\n"+
							"	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n"+
							"		return null;\n"+
							"	}\n"+
							"	\n"+
							"    /**\n"+
							"     * 权限认证\n"+
							"     *\n"+
							"     * @param principalCollection\n"+
							"     * @return\n"+
							"     */\n"+
							"     \n"+
							"     \n"+
							"     \n"+
							"}";

	//
	public static final String SWAGGER2CONFIG_JAVA = "package com.slkj.gradletest.config;\n"+
					"			\n"+
					"import org.springframework.boot.autoconfigure.web.BasicErrorController;\n"+
					"import org.springframework.context.annotation.Bean;\n"+
					"import org.springframework.context.annotation.ComponentScan;\n"+
					"import org.springframework.context.annotation.Configuration;\n"+
					"import org.springframework.web.bind.annotation.ResponseBody;\n"+
					"import org.springframework.web.bind.annotation.RestController;\n"+
					"import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n"+
					"import com.google.common.base.Predicate;\n"+
					"import springfox.documentation.RequestHandler;\n"+
					"import springfox.documentation.builders.ApiInfoBuilder;\n"+
					"import springfox.documentation.service.ApiInfo;\n"+
					"import springfox.documentation.spi.DocumentationType;\n"+
					"import springfox.documentation.spring.web.plugins.Docket;\n"+
					"import springfox.documentation.swagger2.annotations.EnableSwagger2;\n"+
					"\n"+
					"/**\n"+
					" * \n"+
					" * @ClassName: SwaggerConfig.java\n"+
					" * @Description: Swagger配置类\n"+
					" *\n"+
					" * @version: v1.1.0\n"+
					" * @author: 小码哥\n"+
					" * @date: Mar 16, 2017\n"+
					" */\n"+
					"/**\n"+
					" * SwaggerConfig\n"+
					" */\n"+
					"@Configuration\n"+
					"//@EnableWebMvc\n"+
					"@EnableSwagger2 // 启用 Swagger\n"+
					"@ComponentScan(\"com.slkj.gradletest\")  //启用组件扫描\n"+
					"public class Swagger2Config {\n"+
					"	\n"+
					"    @Bean\n"+
					"    public Docket createRestApi() {\n"+
					"        Predicate<RequestHandler> predicate = new Predicate<RequestHandler>() {\n"+
					"            @Override\n"+
					"            public boolean apply(RequestHandler input) {\n"+
					"                Class<?> declaringClass = input.declaringClass();\n"+
					"                if (declaringClass == BasicErrorController.class)// 排除\n"+
					"                    return false;\n"+
					"                if(declaringClass.isAnnotationPresent(RestController.class)) // 被注解的类\n"+
					"                    return true;\n"+
					"                if(input.isAnnotatedWith(ResponseBody.class)) // 被注解的方法\n"+
					"                    return true;\n"+
					"                return false;\n"+
					"            }\n"+
					"        };\n"+
					"        return new Docket(DocumentationType.SWAGGER_2)\n"+
					"                .apiInfo(apiInfo())\n"+
					"                .useDefaultResponseMessages(false)\n"+
					"                .select()\n"+
					"                .apis(predicate)\n"+
					"                .build();\n"+
					"    }\n"+
					"    \n"+
					"    private ApiInfo apiInfo() {\n"+
					"       return new ApiInfoBuilder()\n"+
					"            .title(\"深蓝科技swagger调式api接口\")//大标题\n"+
					"            .version(\"1.0\")//版本\n"+
					"            .build();\n"+
					"    }\n"+
					"}";

	//
	public static final String APPLICATION_JAVA = "package com.slkj.gradletest;\n"+
					"			\n"+
//					"import org.springframework.boot.SpringApplication;\n"+
//					"import org.springframework.boot.autoconfigure.SpringBootApplication;\n"+
//					"import org.springframework.boot.context.web.SpringBootServletInitializer;\n"+
//					"import org.springframework.context.annotation.ComponentScan;\n"+
//					"import springfox.documentation.swagger2.annotations.EnableSwagger2;\n"+
//					"\n"+
//					"@SpringBootApplication  \n"+
//					"//@EnableConfigurationProperties\n"+
//					"@EnableSwagger2             //启动swagger注解\n"+
//					"//开启通用注解扫描  \n"+
//					"@ComponentScan\n"+
					"import org.springframework.boot.SpringApplication;\n"+
					"import org.springframework.boot.autoconfigure.SpringBootApplication;\n"+
					"import org.springframework.boot.web.support.SpringBootServletInitializer;\n"+
					"import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n"+
					"import springfox.documentation.swagger2.annotations.EnableSwagger2;\n"+
					"\n"+
					"@SpringBootApplication  \n"+
					"//@EnableConfigurationProperties\n"+
					"//@EnableSwagger2             //启动swagger注解\n"+
					"//开启通用注解扫描\n"+
					"@EnableRedisHttpSession\n"+
					"public class Application extends SpringBootServletInitializer{     \n"+
					"	/** \n"+
					"     * 实现SpringBootServletInitializer可以让spring-boot项目在web容器中运行 \n"+
					"     */  \n"+
					"	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n"+
					"		return application.sources(Application.class); \n"+
					"}\n"+
					"	//用来运行程序  \n"+
					"    public static void main(String[] args) {          \n"+
					"        SpringApplication.run(Application.class, args);           \n"+
					"    }\n"+
					"}";

	//
	public static final String MD5Util_JAVA = "package com.slkj.gradletest.util;\n"+
						"			\n"+
						"import java.security.MessageDigest;\n"+
						"import org.slf4j.Logger;\n"+
						"import org.slf4j.LoggerFactory;\n"+
						"\n"+
						"public class MD5Util {\n"+
						"	private static Logger LOG = LoggerFactory.getLogger(MD5Util.class);\n"+
						"	public static String MD5Encode(String str) {\n"+
						"		char hexDigits[] = { 'a', '0', '1', 'b', '2', '3', 'c', '4', '5', 'd', '6', '7', 'e', '8', '9', 'f' };\n"+
						"		try {\n"+
						"			byte[] bytes = str.getBytes(\"UTF-8\");\n"+
						"			MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n"+
						"			messageDigest.update(bytes);\n"+
						"			byte[] updateBytes = messageDigest.digest();\n"+
						"			int len = updateBytes.length;\n"+
						"			char myChar[] = new char[len * 2];\n"+
						"			int k = 0;\n"+
						"			for (int i = 0; i < len; i++) {\n"+
						"				byte byte0 = updateBytes[i];\n"+
						"				myChar[k++] = hexDigits[byte0 >>> 4 & 0x0f];\n"+
						"				myChar[k++] = hexDigits[byte0 & 0x0f];\n"+
						"			}\n"+
						"			return new String(myChar);\n"+
						"		} catch (Exception e) {\n"+
						"			LOG.error(\"MD5加密异常：%s\", e.getMessage());\n"+
						"			return null;\n"+
						"		}\n"+
						"	}\n"+
						"	\n"+
						"}";

	//
	public static final String CRITERIA_JAVA = "package com.xjj.loanplatform1.criteria;\n"+
						"	\n"+
						"import com.slkj.autocode.entity.Page;\n"+
						"import com.xjj.loanplatform1.entity.pojo.WithdrawInfo;\n"+
						"\n"+
						"/**\n"+
						"* \n"+
						"* @author sunny Yang [杨松彦]\n"+
						"* @QQ 550358261\n"+
						"* @date 2018-04-16\n"+
						"* @discribe\n"+
						"* >、<、>=、<=、=、!=、like、\n"+
						"* is null、is not null、in、not in\n"+
						"*\n"+
						"*/\n"+
						"public class WithdrawInfoCriteria extends WithdrawInfo{\n"+
						"	/**\n"+
						"	* 版本号\n"+
						"	*/\n"+
						"	private static final long serialVersionUID = 1L;\n"+
						"	private String groupBy123;//分组\n"+
						"	private String having123;//分组过滤\n"+
						"	private String orderBy123;//排序\n"+
						"	private Page page123;\n"+
						"	private String condition123=\"\";//纯条件\n"+
						"	private String selectCondition123;//查询条件\n"+
						"	private String sql123;\n"+
						"	private WithdrawInfo withdrawInfo;\n"+
						"	private String feid123;//字段用于统计查询时设置\n"+
						"\n"+
						"	public WithdrawInfoCriteria() {\n"+
						"\n"+
						"	}\n"+
						"	public String getFeid123() {\n"+
						"		return feid123;\n"+
						"	}\n"+
						"	public void setFeid123(String feid) {\n"+
						"		this.feid123 = feid;\n"+
						"	}\n"+
						"	public WithdrawInfo getWithdrawInfo() {\n"+
						"		return withdrawInfo;\n"+
						"	}\n"+
						"	public void setWithdrawInfo(WithdrawInfo withdrawInfo) {\n"+
						"		this.withdrawInfo = withdrawInfo;\n"+
						"		initWithdrawInfo(withdrawInfo);\n"+
						"	}\n"+
						"\n"+
						"	public String getSql123() {\n"+
						"		return sql123;\n"+
						"	}\n"+
						"\n"+
						"	public void setSql123(String sql123) {\n"+
						"		this.sql123 = sql123;\n"+
						"	}\n"+
						"\n"+
						"	public String getSelectCondition123() {\n"+
						"		if(selectCondition123==null){\n"+
						"			if(condition123.trim().length()>0){\n"+
						"				condition123 = \"where \"+condition123;\n"+
						"			}\n"+
						"			selectCondition123 = condition123;\n"+
						"			if(groupBy123!=null){\n"+
						"				selectCondition123 += \" group by \"+groupBy123+\" \";\n"+
						"			}\n"+
						"			if(having123!=null){\n"+
						"				selectCondition123 += \"having \"+having123+\" \";\n"+
						"			}\n"+
						"			if(orderBy123!=null){\n"+
						"				selectCondition123 += \"order by \"+orderBy123+\" \";\n"+
						"			}\n"+
						"			if(page123!=null){\n"+
						"				selectCondition123 += \"limit \"+((page123.getPageNumber()-1)*page123.getPageSize())+\",\"+page123.getPageSize();\n"+
						"			}\n"+
						"			selectCondition123 = selectCondition123.trim();\n"+
						"		}\n"+
						"		System.out.println(\"查询条件：\"+selectCondition123);\n"+
						"		return selectCondition123;\n"+
						"	}\n"+
						"	public void setSelectCondition123(String selectCondition) {\n"+
						"		this.selectCondition123 = selectCondition;\n"+
						"	}\n"+
						"	public String getCondition123() {\n"+
						"		System.out.println(\"纯条件：\"+condition123);\n"+
						"		return condition123;\n"+
						"	}\n"+
						"	public void setCondition123(String condition) {\n"+
						"		this.condition123 = condition;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria page(Page value){\n"+
						"		page123 = value;\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria groupBy(String value){\n"+
						"		groupBy123 = value;\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria having(String value){\n"+
						"		having123 = value;\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orderBy(String value){\n"+
						"		orderBy123 = value;\n"+
						"		return this;\n"+
						"	}\n"+
						"\n"+
						"	/*public String getSqlAll(String tableName){\n"+
						"		String sql = \"\";\n"+
						"		if(\"where \".equals(condition123)){\n"+
						"			sql = \"select * from `\"+tableName+\"` \";\n"+
						"		}else{\n"+
						"			sql = \"select * from `\"+tableName+\"` \"+condition123+\" \";\n"+
						"		}\n"+
						"		if(groupBy123!=null){\n"+
						"			sql += sql+\" group by \"+groupBy123+\" \";\n"+
						"		}\n"+
						"		if(having123!=null){\n"+
						"			sql += \"having \"+having123+\" \";\n"+
						"		}\n"+
						"		if(orderBy123!=null){\n"+
						"			sql += \"order by \"+orderBy123+\" \";\n"+
						"		}\n"+
						"		if(page123!=null){\n"+
						"			sql += \"limit \"+((page123.getPageNumber()-1)*page123.getPageSize())+\",\"+page123.getPageSize();\n"+
						"		}\n"+
						"		sql = sql.trim();\n"+
						"		return sql; \n"+
						"	}*/\n"+
						"\n"+
						"/************以下为纯条件的拼接*******************/\n\n";

	//
	public static final String CRITERIA0_JAVA = "	public WithdrawInfoCriteria andIdXXXEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria orIdXXXEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXNotEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`!=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`!=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXNotEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`!=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`!=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	/**\n"+
						"	 * 大于\n"+
						"	 * @param \n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public WithdrawInfoCriteria andIdXXXGreaterThan(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`>\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXGreaterThan(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`>\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXLessThan(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`<\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXLessThan(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`<\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXGreadterThanAndEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`>=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXGreadterThanAndEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`>=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXLessThanAndEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`<=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXLessThanAndEquals(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`<=\"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<=\"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXLike(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` like \"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` like \"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXLike(Integer idXXX){\n"+
						"		if(idXXX!=null){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX` like \"+idXXX+\" \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` like \"+idXXX+\" \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXIsNull(){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` is null\";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` is null\";\n"+
						"			}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXIsNull(){\n"+
						"		if(condition123.length()>0){\n"+
						"			condition123 += \"or `id_XXX` is null\";\n"+
						"		}else{\n"+
						"			condition123 += \"`id_XXX` is null\";\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria andIdXXXIsNotNull(){\n"+
						"		if(condition123.length()>0){\n"+
						"			condition123 += \"and `id_XXX` is not null\";\n"+
						"		}else{\n"+
						"			condition123 += \"`id_XXX` is not null\";\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXIsNotNull(){\n"+
						"		if(condition123.length()>0){\n"+
						"			condition123 += \"or `id_XXX` is not null\";\n"+
						"		}else{\n"+
						"			condition123 += \"`id_XXX` is not null\";\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria andIdXXXIn(String value){\n"+
						"		if(value!=null && value.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXIn(String value){\n"+
						"		if(value!=null && value.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX` in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria andIdXXXNotIn(String value){\n"+
						"		if(value!=null && value.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` not in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` not in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXNotIn(String value){\n"+
						"		if(value!=null && value.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX` not in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` not in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n\n";
						
							//
							public static final String CRITERIA1_JAVA = "	public WithdrawInfoCriteria andIdXXXEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria orIdXXXEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXNotEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`!='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`!='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXNotEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`!='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`!='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	/**\n"+
						"	 * 大于\n"+
						"	 * @param \n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public WithdrawInfoCriteria andIdXXXGreaterThan(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`>'\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>'\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXGreaterThan(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`>'\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>'\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXLessThan(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`<'\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<'\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXLessThan(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`<'\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<'\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXGreadterThanAndEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`>='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXGreadterThanAndEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`>='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`>='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXLessThanAndEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX`<='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXLessThanAndEquals(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX`<='\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX`<='\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXLike(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0&&!(\"%\".equals(idXXX.trim()))&&!(\"%%\".equals(idXXX.trim()))){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` like '\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` like '\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXLike(String idXXX){\n"+
						"		if(idXXX!=null&&idXXX.trim().length()>0&&!(\"%\".equals(idXXX.trim()))&&!(\"%%\".equals(idXXX.trim()))){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX` like '\"+idXXX+\"' \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` like '\"+idXXX+\"' \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXIsNull(){\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` is null\";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` is null\";\n"+
						"			}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXIsNull(){\n"+
						"		if(condition123.length()>0){\n"+
						"			condition123 += \"or `id_XXX` is null\";\n"+
						"		}else{\n"+
						"			condition123 += \"`id_XXX` is null\";\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria andIdXXXIsNotNull(){\n"+
						"		if(condition123.length()>0){\n"+
						"			condition123 += \"and `id_XXX` is not null\";\n"+
						"		}else{\n"+
						"			condition123 += \"`id_XXX` is not null\";\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	public WithdrawInfoCriteria orIdXXXIsNotNull(){\n"+
						"		if(condition123.length()>0){\n"+
						"			condition123 += \"or `id_XXX` is not null\";\n"+
						"		}else{\n"+
						"			condition123 += \"`id_XXX` is not null\";\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXIn(String value){\n"+
						"		if(value!=null&&value.trim().length()>0){\n"+
						"			if(value.contains(\",\")){\n"+
						"				String []values = value.split(\",\");\n"+
						"				String newValue = \"\";\n"+
						"				for(String s:values){\n"+
						"					newValue += \"'\"+s+\"',\";\n"+
						"				}\n"+
						"				newValue = newValue.substring(0, newValue.length()-1);\n"+
						"				value = newValue;\n"+
						"			}else{\n"+
						"				value = \"'\"+value+\"'\";\n"+
						"			}\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria orIdXXXIn(String value){\n"+
						"		if(value!=null&&value.trim().length()>0){\n"+
						"			if(value.contains(\",\")){\n"+
						"				String []values = value.split(\",\");\n"+
						"				String newValue = \"\";\n"+
						"				for(String s:values){\n"+
						"					newValue += \"'\"+s+\"',\";\n"+
						"				}\n"+
						"				newValue = newValue.substring(0, newValue.length()-1);\n"+
						"				value = newValue;\n"+
						"			}else{\n"+
						"				value = \"'\"+value+\"'\";\n"+
						"			}\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX` in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria andIdXXXNotIn(String value){\n"+
						"		if(value!=null&&value.trim().length()>0){\n"+
						"			if(value.contains(\",\")){\n"+
						"				String []values = value.split(\",\");\n"+
						"				String newValue = \"\";\n"+
						"				for(String s:values){\n"+
						"					newValue += \"'\"+s+\"',\";\n"+
						"				}\n"+
						"				newValue = newValue.substring(0, newValue.length()-1);\n"+
						"				value = newValue;\n"+
						"			}else{\n"+
						"				value = \"'\"+value+\"'\";\n"+
						"			}\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"and `id_XXX` not in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` not in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n"+
						"	\n"+
						"	public WithdrawInfoCriteria orIdXXXNotIn(String value){\n"+
						"		if(value!=null&&value.trim().length()>0){\n"+
						"			if(value.contains(\",\")){\n"+
						"				String []values = value.split(\",\");\n"+
						"				String newValue = \"\";\n"+
						"				for(String s:values){\n"+
						"					newValue += \"'\"+s+\"',\";\n"+
						"				}\n"+
						"				newValue = newValue.substring(0, newValue.length()-1);\n"+
						"				value = newValue;\n"+
						"			}else{\n"+
						"				value = \"'\"+value+\"'\";\n"+
						"			}\n"+
						"			if(condition123.length()>0){\n"+
						"				condition123 += \"or `id_XXX` not in(\"+value+\") \";\n"+
						"			}else{\n"+
						"				condition123 += \"`id_XXX` not in(\"+value+\") \";\n"+
						"			}\n"+
						"		}\n"+
						"		return this;\n"+
						"	}\n\n";

	//
	public static final String DAO_JAVA = "package com.slkj.gradletest.dao;\n"+
						"			\n"+
						"import java.util.List;\n"+
						"import org.springframework.stereotype.Repository;\n"+
						"import com.slkj.gradletest.criteria.MerchantUserCriteria;\n"+
						"import com.slkj.gradletest.entity.mojo.MerchantUserAO;\n"+
						"import com.slkj.gradletest.entity.pojo.MerchantUser;\n"+
						"\n"+
						"@Repository\n"+
						"public interface IMerchantUserDAO {\n"+
						"	\n"+
						"	/**\n"+
						"	 * \n"+
						"	 * @param id\n"+
						"	 * @return 通过id查询实体对象\n"+
						"	 */\n"+
						"	public MerchantUserAO selectById(Integer id);\n"+
						"	/**\n"+
						"	 * \n"+
						"	 * @param id\n"+
						"	 * @return 通过id删除实体对象\n"+
						"	 * 如果操作对象是视图则不能直接删除\n"+
						"	 */\n"+
						"	public int deleteById(Integer id);\n"+
						"	/**\n"+
						"	 * 通过查询标准查询实体集合\n"+
						"	 * @param criteria\n"+
						"	 * @return \n"+
						"	 */\n"+
						"	public List<MerchantUserAO> selectByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过对象添加实体，不能对视图操作\n"+
						"	 * @param merchantUser\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int addMerchantUser(MerchantUser merchantUser);\n"+
						"	/**\n"+
						"	 * 通过实体id修改实体对象\n"+
						"	 * @param merchantUser\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int updateById(MerchantUser merchantUser);\n"+
						"	\n"+
						"	/**\n"+
						"	 * 通过修改标准来修改实体对象数据,需要赋值对象\n"+
						"	 * @param merchantUser\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int updateByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准删除对象\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int deleteByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询某个字段的最大值\n"+
						"	 * @param feid 需要在Criteria对象中赋值feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int getFeidMaxByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询某个字段的最小值\n"+
						"	 * @param feid  需要在Criteria对象中赋值feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int getFeidMinByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询平均值  需要在Criteria对象中赋值feid\n"+
						"	 * @param feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int getFeidAvgByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询出某个字段的总和\n"+
						"	 * @param feid  需要在Criteria对象中赋值feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int getFeidSumByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询对应的数据总数\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public int getFeidCountByCriteria(MerchantUserCriteria criteria);\n"+
						"}";

	//
	public static final String ENTITYAO_JAVA = "package com.slkj.gradletest.entity.mojo;\n"+
						"			\n"+
						"import java.io.Serializable;\n"+
						"import com.slkj.gradletest.entity.pojo.MerchantUser;\n"+
						"/**\n"+
						" * \n"+
						" * @author sunny Yang\n"+
						" * @date 2017年12月12日\n"+
						" * @discribe\n"+
						" *	如果需要更改entity实体类则在此添加或重写。便于自动生成entity\n"+
						" *\n"+
						" */\n"+
						"public class MerchantUserAO extends MerchantUser implements Serializable{\n"+
						"	\n"+
						"	/**\n"+
						"	 * 版本号\n"+
						"	 */\n"+
						"	private static final long serialVersionUID = 1L;\n"+
						"}";

	//
	public static final String SERVICE_JAVA = "package com.slkj.gradletest.service;\n"+
						"			\n"+
						"import java.util.List;\n"+
						"import com.slkj.autocode.entity.ServiceResult;\n"+
						"import com.slkj.gradletest.criteria.MerchantUserCriteria;\n"+
						"import com.slkj.gradletest.entity.pojo.MerchantUser;\n"+
						"import com.slkj.gradletest.entity.mojo.MerchantUserAO;\n"+
						"\n"+
						"public interface IMerchantUserService {\n"+
						"	/**\n"+
						"	 * \n"+
						"	 * @param id\n"+
						"	 * @return 通过id查询实体对象\n"+
						"	 */\n"+
						"	public ServiceResult<MerchantUserAO> selectById(Integer id);\n"+
						"	/**\n"+
						"	 * \n"+
						"	 * @param id\n"+
						"	 * @return 通过id删除实体对象\n"+
						"	 * 如果操作对象是视图则不能直接删除\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> deleteById(Integer id);\n"+
						"	/**\n"+
						"	 * 通过查询标准查询实体集合\n"+
						"	 * @param criteria\n"+
						"	 * @return \n"+
						"	 */\n"+
						"	public ServiceResult<List<MerchantUserAO>> selectByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过对象添加实体，不能对视图操作\n"+
						"	 * @param merchantUser\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> addMerchantUser(MerchantUser merchantUser);\n"+
						"	/**\n"+
						"	 * 通过实体id修改实体对象\n"+
						"	 * @param merchantUser\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> updateById(MerchantUser merchantUser);\n"+
						"	\n"+
						"	/**\n"+
						"	 * 通过修改标准来修改实体对象数据\n"+
						"	 * @param merchantUser\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> updateByCriteria(MerchantUserCriteria criteria);\n"+
						"	\n"+
						"	/**\n"+
						"	 * 通过标准删除对象\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> deleteByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询某个字段的最大值\n"+
						"	 * @param feid 需要在Criteria对象中赋值feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> getFeidMaxByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询某个字段的最小值\n"+
						"	 * @param feid  需要在Criteria对象中赋值feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> getFeidMinByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询平均值  需要在Criteria对象中赋值feid\n"+
						"	 * @param feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> getFeidAvgByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询出某个字段的总和\n"+
						"	 * @param feid  需要在Criteria对象中赋值feid\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> getFeidSumByCriteria(MerchantUserCriteria criteria);\n"+
						"	/**\n"+
						"	 * 通过标准查询对应的数据总数\n"+
						"	 * @param criteria\n"+
						"	 * @return\n"+
						"	 */\n"+
						"	public ServiceResult<Integer> getFeidCountByCriteria(MerchantUserCriteria criteria);\n"+
						"}";

//	
	public static final String SERVICEIMPL = "package com.slkj.gradletest.serviceImpl;\n"+
						"			\n"+
						"import java.util.List;\n"+
						"import org.springframework.beans.factory.annotation.Autowired;\n"+
						"import org.springframework.stereotype.Service;\n"+
						"import com.slkj.autocode.entity.ServiceResult;\n"+
						"import com.slkj.gradletest.criteria.MerchantUserCriteria;\n"+
						"import com.slkj.gradletest.dao.IMerchantUserDAO;\n"+
						"import com.slkj.gradletest.entity.mojo.MerchantUserAO;\n"+
						"import com.slkj.gradletest.entity.pojo.MerchantUser;\n"+
						"import com.slkj.gradletest.service.IMerchantUserService;\n"+
						"\n"+
						"@Service\n"+
						"public class MerchantUserService implements IMerchantUserService{\n"+
						"	@Autowired\n"+
						"	IMerchantUserDAO merchantUserDAO;\n"+
						"	\n"+
						"	@Override\n"+
						"	public ServiceResult<MerchantUserAO> selectById(Integer id) {\n"+
						"		MerchantUserAO merchantUserAO = merchantUserDAO.selectById(id);\n"+
						"		ServiceResult<MerchantUserAO> serviceResult = new ServiceResult<MerchantUserAO>();\n"+
						"		if(merchantUserAO!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过id查询对象正常\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(merchantUserAO);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过id未能查询到对象数据\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(merchantUserAO);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"	\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> deleteById(Integer id) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.deleteById(id);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过id删除对象正常\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过id未删除对象\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"	\n"+
						"	@Override\n"+
						"	public ServiceResult<List<MerchantUserAO>> selectByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<List<MerchantUserAO>> serviceResult = new ServiceResult<List<MerchantUserAO>>();\n"+
						"		List<MerchantUserAO> resultList = merchantUserDAO.selectByCriteria(criteria);\n"+
						"		if(resultList!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过标准已查询到对象\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(resultList);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过标准未能查询到对象\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(resultList);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"	\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> addMerchantUser(MerchantUser merchantUser) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.addMerchantUser(merchantUser);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"添加对象正常\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"未能正常添加对象对象\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"	\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> updateById(MerchantUser merchantUser) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.updateById(merchantUser);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过id修改对象正常\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过id未能修改对象\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"	\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> updateByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		if(criteria.getMerchantUser()==null){\n"+
						"			serviceResult.setCode(10010);\n"+
						"			serviceResult.setMsg(\"通过标准修改对象时没有放入需要修改的数据对象\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(null);\n"+
						"			return serviceResult;\n"+
						"		}\n"+
						"		Integer result = merchantUserDAO.updateByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过标准修改对象正常\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过标准修改对象不成功\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> deleteByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.deleteByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过条件删除数据完成\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过条件未能删除数据\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> getFeidMaxByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.getFeidMaxByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的最大值成功\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的最大值失败\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> getFeidMinByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.getFeidMinByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的最小值成功\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的最小值失败\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> getFeidAvgByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.getFeidAvgByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的平均值成功\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的平均值失败\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> getFeidSumByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.getFeidSumByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的总合值成功\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的总合值失败\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"\n"+
						"	@Override\n"+
						"	public ServiceResult<Integer> getFeidCountByCriteria(MerchantUserCriteria criteria) {\n"+
						"		ServiceResult<Integer> serviceResult = new ServiceResult<Integer>();\n"+
						"		Integer result = merchantUserDAO.getFeidCountByCriteria(criteria);\n"+
						"		if(result!=null){\n"+
						"			serviceResult.setCode(200);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的总条数成功\");\n"+
						"			serviceResult.setSucceed(true);\n"+
						"			serviceResult.setData(result);\n"+
						"		}else{\n"+
						"			serviceResult.setCode(500);\n"+
						"			serviceResult.setMsg(\"通过条件查询某个字段的总总条数失败\");\n"+
						"			serviceResult.setSucceed(false);\n"+
						"			serviceResult.setData(result);\n"+
						"		}\n"+
						"		return serviceResult;\n"+
						"	}\n"+
						"}";
	
	public static final String REQUESTCONTROLLER = "//package com.slkj.collective_merchant.controller.request;\n"+
						"//\n"+
						"//import javax.servlet.http.HttpServletRequest;\n"+
						"//import javax.servlet.http.HttpServletResponse;\n"+
						"//import org.slf4j.Logger;\n"+
						"//import org.slf4j.LoggerFactory;\n"+
						"//import org.springframework.stereotype.Controller;\n"+
						"//import org.springframework.ui.Model;\n"+
						"//import org.springframework.web.bind.annotation.PathVariable;\n"+
						"//import org.springframework.web.bind.annotation.RequestMapping;\n"+
						"//import org.springframework.web.bind.annotation.RequestMethod;\n"+
						"//import org.springframework.web.servlet.ModelAndView;\n"+
						"//\n"+
						"//@Controller\n"+
						"//@RequestMapping(value = \"/merchant/requestMerchantUser\")\n"+
						"//public class MerchantUserRequestController {\n"+
						"//	private static Logger LOG = LoggerFactory.getLogger(MerchantUserRequestController.class);\n"+
						"//\n"+
						"//	@RequestMapping(value = \"/showform/{id}\", method = { RequestMethod.GET, RequestMethod.POST })\n"+
						"//    public String showform(@PathVariable String id , Model model, HttpServletRequest request) {\n"+
						"//    	LOG.info(\"有访问来自，IP: %s USER-AGENT: %s\", request.getRemoteAddr(), request.getHeader(\"user-agent\"));\n"+
						"//    	LOG.info(\"SessionId %s\", request.getSession().getId());\n"+
						"//    	//将当前时间传到前端\n"+
						"////    	model.addAttribute(\"currentTime\", DateTimeUtils.formateDateToStr(new Date(),DateTimeUtils.FORMAT_YMD_HMS));\n"+
						"//    	//将当前运用名称传到前端\n"+
						"//\n"+
						"//    	model.addAttribute(\"articleColumnGroupAO\", \"放个对象在这里\");\n"+
						"//\n"+
						"//    	return \"跳转的页面路径\";\n"+
						"//    }\n"+
						"//\n"+
						"//	@RequestMapping(value = \"/toLogin\", method = { RequestMethod.GET, RequestMethod.POST })\n"+
						"//    public ModelAndView showform(ModelAndView mv,HttpServletRequest request,HttpServletResponse response) {\n"+
						"////    	LOG.info(\"有登录访问来自，IP: %s USER-AGENT: %s\", request.getRemoteAddr(), request.getHeader(\"user-agent\"));\n"+
						"////    	LOG.info(\"SessionId %s\", request.getSession().getId());\n"+
						"//		System.out.println(\"请求已经进入登录，开始跳转页面\");\n"+
						"//    	mv.setViewName(\"../../login\");\n"+
						"//    	return mv;\n"+
						"//    }\n"+
						"//\n"+
						"//	@RequestMapping(\"/\")\n"+
						"//	public String index() {\n"+
						"//		System.out.println(\"请求已经进入登录，开始跳转页面\");\n"+
						"//		return \"login\";\n"+
						"//	}\n"+
						"//\n"+
						"//	@RequestMapping(\"/test\")\n"+
						"//	public String test() {\n"+
						"//		System.out.println(\"test\");\n"+
						"//		return \"test\";\n"+
						"//	}\n"+
						"//\n"+
						"//}\n";
	public static final String RESTCONTROLLER = "//package com.slkj.collective_merchant.controller.rest;\n"+
						"//\n"+
						"//import java.util.List;\n"+
						"//import javax.annotation.Resource;\n"+
						"//import javax.servlet.http.HttpServletRequest;\n"+
						"//import javax.servlet.http.HttpServletResponse;\n"+
						"//import javax.servlet.http.HttpSession;\n"+
						"//import org.apache.shiro.SecurityUtils;\n"+
						"//import org.apache.shiro.authc.AuthenticationException;\n"+
						"//import org.apache.shiro.authc.UsernamePasswordToken;\n"+
						"//import org.apache.shiro.subject.Subject;\n"+
						"//import org.slf4j.Logger;\n"+
						"//import org.slf4j.LoggerFactory;\n"+
						"//import org.springframework.web.bind.annotation.RequestHeader;\n"+
						"//import org.springframework.web.bind.annotation.RequestMapping;\n"+
						"//import org.springframework.web.bind.annotation.RequestMethod;\n"+
						"//import org.springframework.web.bind.annotation.RequestParam;\n"+
						"//import org.springframework.web.bind.annotation.ResponseBody;\n"+
						"//import org.springframework.web.bind.annotation.RestController;\n"+
						"//import com.slkj.autocode.entity.ServiceResult;\n"+
						"//import com.slkj.collective_merchant.criteria.MerchantUserCriteria;\n"+
						"//import com.slkj.collective_merchant.entity.mojo.MerchantUserAO;\n"+
						"//import com.slkj.collective_merchant.entity.pojo.MerchantUser;\n"+
						"//import com.slkj.collective_merchant.service.IMerchantUserService;\n"+
						"//import com.slkj.collective_merchant.util.MD5Util;\n"+
						"//import com.wordnik.swagger.annotations.ApiOperation;\n"+
						"//import io.swagger.annotations.Api;\n"+
						"//import io.swagger.annotations.ApiImplicitParam;\n"+
						"//import io.swagger.annotations.ApiImplicitParams;\n"+
						"//import io.swagger.annotations.ApiResponse;\n"+
						"//import io.swagger.annotations.ApiResponses;\n"+
						"//\n"+
						"///**\n"+
						"// *\n"+
						"// * @author sunny Yang\n"+
						"// * @date 2017年12月12日\n"+
						"// * @discribe\n"+
						"// * 商家用户相关请求\n"+
						"// *\n"+
						"// */\n"+
						"//@RestController\n"+
						"//@RequestMapping(\"/merchant/restMerchantUser\")\n"+
						"//@Api(\"userController相关api\")\n"+
						"//public class MerchantUserRestController {\n"+
						"//	private Logger log = LoggerFactory.getLogger(MerchantUserRestController.class);\n"+
						"//	@Resource\n"+
						"//	IMerchantUserService merchantUserService;\n"+
						"////		@Value(\"${test.msg}\")\n"+
						"////	    private String msg;\n"+
						"//		 @ApiImplicitParams({\n"+
						"//		 @ApiImplicitParam(paramType=\"header\",name=\"userName\",dataType=\"String\",required=true,value=\"用户名\",defaultValue=\"admin\"),\n"+
						"//		 @ApiImplicitParam(paramType=\"query\",name=\"password\",dataType=\"String\",required=true,value=\"用户的密码\",defaultValue=\"123456\")\n"+
						"//		 })\n"+
						"//		 @ApiResponses({\n"+
						"//		 @ApiResponse(code=10001,message=\"登录账号或者密码错误\"),\n"+
						"//		 })\n"+
						"//		 @RequestMapping(value=\"/loginCheck\",method = RequestMethod.POST)\n"+
						"//		 @ApiOperation(value = \"用户登录验证请求\",httpMethod =\"POST\", response = String.class,notes = \"loginCheck\")\n"+
						"//		 @ResponseBody\n"+
						"//		 public ServiceResult<MerchantUser> loginCheck(@RequestHeader(\"userName\") String userName, @RequestParam(\"password\") String password\n"+
						"//				 ,HttpServletRequest request,HttpServletResponse response) {\n"+
						"//			 ServiceResult<MerchantUser> serviceResult = new ServiceResult<MerchantUser>();\n"+
						"////			 获取sessionid，登录成功后用于在缓存中存储用户信息\n"+
						"//			 String sessionId = request.getSession().getId();\n"+
						"//			 //首先对密码加严\n"+
						"//			 password = MD5Util.MD5Encode(password);\n"+
						"//			 UsernamePasswordToken passwordToken = new UsernamePasswordToken(userName, password);\n"+
						"//			 Subject subject = SecurityUtils.getSubject();\n"+
						"//			 try{\n"+
						"//				 subject.login(passwordToken);\n"+
						"//			 }catch(AuthenticationException e){\n"+
						"//				serviceResult.setCode(10001);\n"+
						"//				serviceResult.setMsg(\"账号或密码错误！\");\n"+
						"//				serviceResult.setSucceed(true);\n"+
						"//				serviceResult.setData(null);\n"+
						"//				return serviceResult;\n"+
						"//			 }\n"+
						"//			 MerchantUserCriteria criteria = new MerchantUserCriteria();\n"+
						"//			 criteria.merchantUserNameEquals(userName);\n"+
						"//			 ServiceResult<List<MerchantUser>> result = merchantUserService.selectByCriteria(criteria);\n"+
						"//			 MerchantUser resultEntity = result.getData().get(0);\n"+
						"//			 HttpSession session = request.getSession();\n"+
						"//			 //判断内存中是否存在该对象，如果存在删除内存中的对象则先移除内存中的对象\n"+
						"//			 if(session.getAttribute(resultEntity.getMerchantUserNo())!=null){\n"+
						"//				 String sessionOldId = (String)session.getAttribute(resultEntity.getMerchantUserNo()+\"_id\");\n"+
						"//				 session.removeAttribute(sessionOldId);\n"+
						"//				 session.removeAttribute(resultEntity.getMerchantUserNo()+\"_id\");\n"+
						"//			 }\n"+
						"//			 session.setAttribute(sessionId, resultEntity);\n"+
						"//			 session.setAttribute(resultEntity.getMerchantUserNo()+\"_id\",sessionId);\n"+
						"//			 MerchantUserAO merchantUserAO = (MerchantUserAO) resultEntity;\n"+
						"////			 merchantUserAO.setToken(sessionId);\n"+
						"//			 serviceResult.setData(merchantUserAO);\n"+
						"//			 serviceResult.setCode(200);\n"+
						"//			 serviceResult.setMsg(\"登录验证成功！\");\n"+
						"//			 serviceResult.setSucceed(true);\n"+
						"//		 return serviceResult;\n"+
						"//		 }\n"+
						"//\n"+
						"//\n"+
						"//}";
}
